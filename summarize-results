#!/usr/bin/python

import glob
import re
import sys

if len(sys.argv) < 3:
    print "usage: " + sys.argv[0] + " <input file pattern> <rank>"
    exit()

inpattern = sys.argv[1]
rank = sys.argv[2]

sep = "\t"
unclre = re.compile('^# unclassified:\s*([0-9.]+)%.*')
clasre = re.compile('^# classified:.*')
precre = re.compile('^# precision.*')
sensre = re.compile('^# sensitivity.*')
rankre = re.compile('^#   ([a-zA-Z]+)\s+([0-9.]+)%')

def parse_rank(line, rec):
    res = rankre.match(line)
    if res is not None:
        rec[res.group(1)] = res.group(2)
        return True
    return False

fnames = glob.glob(inpattern)
fnames.sort()

pad = 0
for fname in fnames:
    if len(fname) > pad:
        pad = len(fname)

if pad > 6:
    pad = pad - 6

print "Results on rank " + rank + ":"
print "filename" + (" " * pad) \
    + sep + "uncl" + sep + "clas" + sep + "prec" + sep + "sens"


for fname in fnames:
    with open(fname, 'r') as file:
        section = 0
        ranks = False
        uncl = ""
        clas = {}
        prec = {}
        sens = {}

        for line in file:
            if section == 0:
                res = unclre.match(line)
                if res is not None:
                    uncl = res.group(1)
                    section = 1

            elif section == 1:
                res = clasre.match(line)
                if res is not None:
                    section = 2

            elif section == 2:
                if not parse_rank(line, clas):
                    section = 3
                    res = precre.match(line)
                    if res is not None:
                        section = 4

            elif section == 3:
                res = precre.match(line)
                if res is not None:
                    section = 4

            elif section == 4:
                if not parse_rank(line, prec):
                    section = 5
                    res = sensre.match(line)
                    if res is not None:
                        section = 6

            elif section == 5:
                res = sensre.match(line)
                if res is not None:
                    section = 6

            elif section == 6:
                if not parse_rank(line, sens):
                    section = 7

            # print str(section) + " -> " + line

    if uncl == "":
        uncl = "0.0"

    if section > 5:
        print fname + "   " \
            + sep + str(round(float(uncl),2)) \
            + sep + str(round(float(clas[rank]),2)) \
            + sep + str(round(float(prec[rank]),2)) \
            + sep + str(round(float(sens[rank]),2))
