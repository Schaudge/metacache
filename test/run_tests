#!/bin/bash

set -e

# ---------------------------------------------------------
# script expects to run in its own directory
# ---------------------------------------------------------
dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $dir


# ---------------------------------------------------------
# parse command line arguments
# ---------------------------------------------------------
# default: cpu version
target="release"
metacache="../metacache"
threads="-threads 8"

if [ $# -ge 1 ]; then
  if [ "$1" == "gpu" ]; then
    target="gpu_release"
    metacache="../metacache_gpu"
    threads="-threads 3"
    gpus="-gpus 1"
  elif [ "$1" == "clean" ]; then
    rm *.meta
    rm *.cache*
    rm -r data
    rm -r taxonomy
    rm -r results
    pushd .
    cd ..
    make clean
    popd
    if [ $# -gt 1 ]; then
      if [ "$2" == "notest" ]; then
        exit
      fi
    fi
  fi
fi

mkdir -pv results


# ---------------------------------------------------------
# extract test data
# ---------------------------------------------------------
if [ ! -d data ]; then
  tar zxvf data.tar.gz
fi
if [ ! -d taxonomy ]; then
  tar zxvf taxonomy.tar.gz
fi


# ---------------------------------------------------------
# make MetaCache executable
# ---------------------------------------------------------
pushd .
cd ..
make $target -j
popd


# ---------------------------------------------------------
# make small testing database
# ---------------------------------------------------------
if [ ! -e "bacteria1.meta" ]; then
    $metacache build bacteria1 data/bacteria1.fa -taxonomy taxonomy $gpus
fi


# ---------------------------------------------------------
# output formatting tests
# ---------------------------------------------------------
function add_formatting_tests1 {
  input=$1
  param=$2

  tests="${tests} ${input} ${param}\n"
  tests="${tests} ${input} ${param} -lineage\n"
  tests="${tests} ${input} ${param} -separate-cols\n"
  tests="${tests} ${input} ${param} -lineage -separate-cols\n"

  tests="${tests} ${input} ${param} -taxids\n"
  tests="${tests} ${input} ${param} -lineage -taxids\n"
  tests="${tests} ${input} ${param} -separate-cols -taxids\n"
  tests="${tests} ${input} ${param} -lineage -separate-cols -taxids\n"

  tests="${tests} ${input} ${param} -taxids-only\n"
  tests="${tests} ${input} ${param} -lineage -taxids-only\n"
  tests="${tests} ${input} ${param} -separate-cols -taxids-only\n"
  tests="${tests} ${input} ${param} -lineage -separate-cols -taxids-only\n"
}

function add_formatting_tests2 {
  add_formatting_tests1 $1 "$2"
  add_formatting_tests1 $1 "$2 -omit-ranks"
  add_formatting_tests1 $1 "$2 -queryids"
  add_formatting_tests1 $1 "$2 -queryids -omit-ranks"
}

function add_formatting_tests {
  add_formatting_tests2 $1 "$2"
  add_formatting_tests2 $1 "$2 -mapped-only"
  add_formatting_tests2 $1 "$2 -separator /%/"
}

# fasta -------------------------------
query=data/fmt.fa

tests=""
add_formatting_tests $query "-no-summary -no-query-params $threads"

echo -e ${tests} | $metacache query bacteria1 $gpus | grep "NC_" > results/fmt_fa.out

DIFF=$( diff <(sort results/fmt_fa.out) <(sort data/fmt.expected) )

if [ "$DIFF" != "" ]; then
    echo "FAILED formatting test: Actual output does not match expected output."
    exit 1
fi

# fastq -------------------------------
query=data/fmt.fa

tests=""
add_formatting_tests $query "-no-summary -no-query-params $threads"

echo -e ${tests} | $metacache query bacteria1 $gpus | grep "NC_" > results/fmt_fq.out

DIFF=$( diff <(sort results/fmt_fq.out) <(sort data/fmt.expected) )

if [ "$DIFF" != "" ]; then
    echo "FAILED formatting test: Actual output does not match expected output."
    exit 1
fi


# ---------------------------------------------------------
# classification tests
# ---------------------------------------------------------
common="-no-query-params -mapped-only -precision -ground-truth -tophits -allhits -hits-per-ref -abundances -abundance-per species $threads"
# common="-no-query-params -mapped-only -precision -ground-truth -tophits -allhits -queryids $threads"

# fasta -------------------------------
tests_fa=""
tests_fa="${tests_fa} data/single.fa ${common}\n"
tests_fa="${tests_fa} data/pairs.fa -pairseq ${common}\n"
tests_fa="${tests_fa} data/pair.1.fa data/pair.2.fa -pairfiles ${common}\n"

echo -e ${tests_fa} | $metacache query bacteria1 $gpus | grep "|\|#" | grep -v "time\|speed\|list\|ignore" | sed "s/\.fa//g" > results/classified_fa.out

if [ "$gpus" != "" ]; then
  DIFF=$( diff <(sort results/classified_fa.out) <(sort data/classified_gpu.expected) )
else
  DIFF=$( diff <(sort results/classified_fa.out) <(sort data/classified.expected) )
fi

if [ "$DIFF" != "" ]; then
    echo "FAILED fasta classification test: Actual output does not match expected output."
    exit 1
fi

# fastq -------------------------------
tests_fq=""
tests_fq="${tests_fq} data/single.fq ${common}\n"
tests_fq="${tests_fq} data/pairs.fq -pairseq ${common}\n"
tests_fq="${tests_fq} data/pair.1.fq data/pair.2.fq -pairfiles ${common}\n"

echo -e ${tests_fq} | $metacache query bacteria1 $gpus | grep "|\|#" | grep -v "time\|speed\|list\|ignore" | sed "s/\.fq//g" > results/classified_fq.out

if [ "$gpus" != "" ]; then
  DIFF=$( diff <(sort results/classified_fq.out) <(sort data/classified_gpu.expected) )
else
  DIFF=$( diff <(sort results/classified_fq.out) <(sort data/classified.expected) )
fi

if [ "$DIFF" != "" ]; then
    echo "FAILED fastq classification test: Actual output does not match expected output."
    exit 1
fi


echo "SUCCESS"

